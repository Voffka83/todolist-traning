{"ast":null,"code":"var _jsxFileName = \"/Users/Voffka/REACT+HTML+CSS+JS/IT-incubator/todolist traning/src/Todolist.tsx\";\nimport React, { useState } from 'react';\nexport function Todolist(props) {\n  let [newTasktTitle, setNewTasktTitle] = useState(\"\");\n\n  let onAddTasksHandler = () => {\n    props.addTasks(newTasktTitle);\n    setNewTasktTitle(\"\");\n  };\n\n  let onChangeHandler = e => {\n    setNewTasktTitle(e.currentTarget.value); // props.changeStatus(t.id, setNewTasktTitle)\n  };\n\n  let onKeyPresHandler = e => {\n    if (e.charCode === 13) {\n      onAddTasksHandler();\n    }\n  };\n\n  let onAllClickHandler = () => {\n    props.changeFilter(\"All\");\n  };\n\n  let onActiveClickHandler = () => {\n    props.changeFilter(\"Active\");\n  };\n\n  let onCompletedClickHandler = () => {\n    props.changeFilter(\"Completed\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, props.todolistTitle), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newTasktTitle,\n    onChange: onChangeHandler,\n    onKeyPress: onKeyPresHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onAddTasksHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, props.button)), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, props.tasks.map(t => {\n    let onClickHandler = () => {\n      props.removeTask(t.id);\n    };\n\n    let onChangeHandler = () => {\n      console.log(\"Whant to change\");\n    };\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: t.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      onChange: onChangeHandler,\n      checked: t.isDone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 33\n      }\n    }, t.title), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: onClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }\n    }, \"-x-\"));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onAllClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"All\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onActiveClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, \"Active\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onCompletedClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, \"Completed\")));\n}","map":{"version":3,"sources":["/Users/Voffka/REACT+HTML+CSS+JS/IT-incubator/todolist traning/src/Todolist.tsx"],"names":["React","useState","Todolist","props","newTasktTitle","setNewTasktTitle","onAddTasksHandler","addTasks","onChangeHandler","e","currentTarget","value","onKeyPresHandler","charCode","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","todolistTitle","button","tasks","map","t","onClickHandler","removeTask","id","console","log","isDone","title"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {FilterValueType} from \"./App\";\n\ntype TasksType = {\n    id: string,\n    title: string,\n    isDone: boolean\n}\n\ntype TodolistProps = {\n    todolistTitle: string\n    button: string\n    tasks: Array<TasksType>\n    removeTask: (id: string) => void\n    changeFilter: (value: FilterValueType) => void\n    addTasks: (title: string) => void\n    changeStatus: (isDone: boolean) => void\n}\n\nexport function Todolist(props: TodolistProps) {\n    let [newTasktTitle, setNewTasktTitle] = useState(\"\")\n\n    let onAddTasksHandler = () => {\n        props.addTasks(newTasktTitle)\n        setNewTasktTitle(\"\")\n    }\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTasktTitle(e.currentTarget.value)\n        // props.changeStatus(t.id, setNewTasktTitle)\n    }\n\n    let onKeyPresHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 13) {\n            onAddTasksHandler()\n        }\n    }\n\n    let onAllClickHandler = () => {\n        props.changeFilter(\"All\")\n    }\n    let onActiveClickHandler = () => {\n        props.changeFilter(\"Active\")\n    }\n\n    let onCompletedClickHandler = () => {\n        props.changeFilter(\"Completed\")\n    }\n\n    return (\n        <div>\n            <h3>{props.todolistTitle}</h3>\n            <div>\n                <input value={newTasktTitle}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPresHandler}\n                />\n\n                <button onClick={onAddTasksHandler}>{props.button}</button>\n            </div>\n            <ul>\n                {\n                    props.tasks.map(t => {\n                        let onClickHandler = () => {props.removeTask(t.id)}\n                        let onChangeHandler =( () =>{\n                            console.log(\"Whant to change\")})\n                        return (\n                            <li key={t.id}>\n                                <input type=\"checkbox\"\n                                       onChange={onChangeHandler}\n                                       checked={t.isDone}/>\n                                <span>{t.title}</span>\n                                <button onClick={onClickHandler}>-x-</button>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n\n            <div>\n                <button onClick={onAllClickHandler}>All</button>\n                <button onClick={onActiveClickHandler}>Active</button>\n                <button onClick={onCompletedClickHandler}>Completed</button>\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}