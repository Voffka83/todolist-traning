{"ast":null,"code":"var _jsxFileName = \"/Users/Voffka/REACT+HTML+CSS+JS/IT-incubator/todolist traning/src/Todolist.tsx\";\nimport React, { useState } from 'react';\nexport function Todolist(props) {\n  let [newTasksTitle, setNewTasksTitle] = useState(\"\");\n  let [error, setError] = useState(null);\n\n  let onAddTasksHandler = () => {\n    if (newTasksTitle.trim() !== \"\" && newTasksTitle !== \"kaka\") {\n      props.addTasks(newTasksTitle.trim());\n      setNewTasksTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  };\n\n  let onChangeHandler = e => {\n    setNewTasksTitle(e.currentTarget.value); // props.changeStatus(t.id, setNewTasksTitle)\n  };\n\n  let onKeyPresHandler = e => {\n    setError(null);\n\n    if (e.charCode === 13) {\n      onAddTasksHandler();\n    }\n  };\n\n  let onAllClickHandler = () => {\n    props.changeFilter(\"All\");\n  };\n\n  let onActiveClickHandler = () => {\n    props.changeFilter(\"Active\");\n  };\n\n  let onCompletedClickHandler = () => {\n    props.changeFilter(\"Completed\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, props.todolistTitle), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newTasksTitle,\n    onChange: onChangeHandler,\n    onKeyPress: onKeyPresHandler,\n    className: error ? \"error\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onAddTasksHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, props.button), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 27\n    }\n  }, error)), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, props.tasks.map(t => {\n    let onClickHandler = () => {\n      props.removeTask(t.id);\n    };\n\n    let onChangeHandler = e => {\n      props.changeStatus(t.id, e.currentTarget.checked);\n    };\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: t.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      onChange: onChangeHandler,\n      checked: t.isDone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 33\n      }\n    }, t.title), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: onClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }\n    }, \"-x-\"));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onAllClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"All\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onActiveClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Active\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onCompletedClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"Completed\")));\n}","map":{"version":3,"sources":["/Users/Voffka/REACT+HTML+CSS+JS/IT-incubator/todolist traning/src/Todolist.tsx"],"names":["React","useState","Todolist","props","newTasksTitle","setNewTasksTitle","error","setError","onAddTasksHandler","trim","addTasks","onChangeHandler","e","currentTarget","value","onKeyPresHandler","charCode","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","todolistTitle","button","tasks","map","t","onClickHandler","removeTask","id","changeStatus","checked","isDone","title"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {FilterValueType} from \"./App\";\n\ntype TasksType = {\n    id: string,\n    title: string,\n    isDone: boolean\n}\n\ntype TodolistProps = {\n    todolistTitle: string\n    button: string\n    tasks: Array<TasksType>\n    removeTask: (id: string) => void\n    changeFilter: (value: FilterValueType) => void\n    addTasks: (title: string) => void\n    changeStatus: (id: string, isDone: boolean) => void\n}\n\nexport function Todolist(props: TodolistProps) {\n    let [newTasksTitle, setNewTasksTitle] = useState(\"\")\n\n    let [error, setError] = useState <string | null> (null)\n\n    let onAddTasksHandler = () => {\n        if (newTasksTitle.trim() !== \"\" && newTasksTitle !== \"kaka\") {\n            props.addTasks(newTasksTitle.trim())\n            setNewTasksTitle(\"\")\n        } else{\n            setError(\"Title is required\")\n        }\n    }\n\n    let onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTasksTitle(e.currentTarget.value)\n        // props.changeStatus(t.id, setNewTasksTitle)\n    }\n\n    let onKeyPresHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null);\n        if (e.charCode === 13) {\n            onAddTasksHandler()\n        }\n    }\n    \n    let onAllClickHandler = () => {\n        props.changeFilter(\"All\")\n    }\n    let onActiveClickHandler = () => {\n        props.changeFilter(\"Active\")\n    }\n    let onCompletedClickHandler = () => {\n        props.changeFilter(\"Completed\")\n    }\n\n    return (\n        <div>\n            <h3>{props.todolistTitle}</h3>\n            <div>\n                <input value={newTasksTitle}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPresHandler}\n                       className={error ? \"error\" : \"\"}\n                />\n\n                <button onClick={onAddTasksHandler}>{props.button}</button>\n                {error && <div className=\"error-message\">{error}</div>}\n\n            </div>\n            <ul>\n                {\n                    props.tasks.map(t => {\n                        let onClickHandler = () => {props.removeTask(t.id)}\n                        let onChangeHandler =( e: ChangeEvent<HTMLInputElement>) =>{\n                            props.changeStatus(t.id, e.currentTarget.checked)}\n                        return (\n                            <li key={t.id}>\n                                <input type=\"checkbox\"\n                                       onChange={onChangeHandler}\n                                       checked={t.isDone}/>\n                                <span>{t.title}</span>\n                                <button onClick={onClickHandler}>-x-</button>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n\n            <div>\n                <button onClick={onAllClickHandler}>All</button>\n                <button onClick={onActiveClickHandler}>Active</button>\n                <button onClick={onCompletedClickHandler}>Completed</button>\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}